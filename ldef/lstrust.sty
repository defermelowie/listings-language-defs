\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{lstrust}[2023/05/18 Listings language definition for Rust]

\RequirePackage{listings}

% Source: https://github.com/denki/listings-rust/blob/d52a3d9211ee7e065e87b0e1c15af874aefc8848/listings-rust.sty
\lstdefinelanguage{Rust}{
    alsodigit={0x}, % hex numbers are numbers too!
    alsoletter={!}, % exlamation marks are part of macros
    morekeywords={break, continue, else, for, if, in, loop, match, return, while},          % control flow keywords
    morekeywords={as, const, let, move, mut, ref, static},                                  % in the context of variables
    morekeywords={dyn, enum, fn, impl, Self, self, struct, trait, type, union, use, where}, % in the context of declarations
    morekeywords={crate, extern, mod, pub, super},                                          % in the context of modularisation
    morekeywords={unsafe},                                                                  % markers
    morekeywords={abstract, alignof, become, box, do, final, macro, offsetof, override, priv, proc, pure, sizeof, typeof, unsized, virtual, yield},  % reserved identifiers
    morekeywords=[2] % std traits
    {
        Add, AddAssign, Any, AsciiExt, AsInner, AsInnerMut, AsMut, AsRawFd, 
        AsRawHandle, AsRawSocket, AsRef, Binary, BitAnd, BitAndAssign, Bitor, 
        BitOr, BitOrAssign, BitXor, BitXorAssign, Borrow, BorrowMut, Boxed, 
        BoxPlace, BufRead, BuildHasher, CastInto, CharExt, Clone, CoerceUnsized, 
        CommandExt, Copy, Debug, DecodableFloat, Default, Deref, DerefMut, 
        DirBuilderExt, DirEntryExt, Display, Div, DivAssign, DoubleEndedIterator, 
        DoubleEndedSearcher, Drop, EnvKey, Eq, Error, ExactSizeIterator, ExitStatusExt, 
        Extend, FileExt, FileTypeExt, Float, Fn, FnBox, FnMut, FnOnce, Freeze, From,
        FromInner, FromIterator, FromRawFd, FromRawHandle, FromRawSocket, FromStr, 
        FullOps, FusedIterator, Generator, Hash, Hasher, Index, IndexMut, InPlace, 
        Int, Into, IntoCow, IntoInner, IntoIterator, IntoRawFd, IntoRawHandle, 
        IntoRawSocket, IsMinusOne, IsZero, Iterator, JoinHandleExt, LargeInt, LowerExp,
        LowerHex, MetadataExt, Mul, MulAssign, Neg, Not, Octal, OpenOptionsExt, Ord, 
        OsStrExt, OsStringExt, Packet, PartialEq, PartialOrd, Pattern, PermissionsExt, 
        Place, Placer, Pointer, Product, Put, RangeArgument, RawFloat, Read, Rem, 
        RemAssign, Seek, Shl, ShlAssign, Shr, ShrAssign, Sized, SliceConcatExt, 
        SliceExt, SliceIndex, Stats, Step, StrExt, Sub, SubAssign, Sum, Sync, 
        TDynBenchFn, Terminal, Termination, ToOwned, ToSocketAddrs, ToString, Try, 
        TryFrom, TryInto, UnicodeStr, Unsize, UpperExp, UpperHex, WideInt, Write
    },
    morekeywords=[3] % primitive types
    {
        bool, char, f32, f64, i8, i16, i32, i64, isize, 
        str, u8, u16, u32, u64, unit, usize, i128, u128
    },
    morekeywords=[4]{Err, false, None, Ok, Some, true}, % prelude value constructors
    morekeywords=[5] % prelude macros
    {
        assert!, assert_eq!, assert_ne!, cfg!, column!, compile_error!, concat!, 
        concat_idents!, debug_assert!, debug_assert_eq!, debug_assert_ne!, env!, 
        eprint!, eprintln!, file!, format!, format_args!, include!, include_bytes!, 
        include_str!, line!, module_path!, option_env!, panic!, print!, println!, 
        select!, stringify!, thread_local!, try!, unimplemented!, unreachable!, 
        vec!, write!, writeln!
    },
    morecomment=[l]{//},     % mark // as line comment start
    morecomment=[s]{/*}{*/}, % mark /*, */ as block comment begin, end
    morestring=[b]",         % mark " as string start/end
}
